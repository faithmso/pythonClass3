"""
1. If we list all the natural numbers below 10 that are multiples of 3 or 5,
we get 3, 5, 6 and 9. The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.
"""


def sum_of_multiples(n):
    sum = 0
    for i in range(n):
        if i % 3 == 0 or i % 5 == 0:
            sum += i
    return sum

print(sum_of_multiples(1000))

"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, 
    the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the 
even-valued terms.
"""


def sum_of_even_fibonacci(n):

    sum = 0
    a, b = 0, 1
    while b < n:
        if b % 2 == 0:
            sum += b
        a, b = b, a + b
    return sum


print(sum_of_even_fibonacci(4000000))

"""
The prime factors of 13195 are 5, 7, 13 and 29.
What is the largest prime factor of the number 600851475143 
"""


def largest_prime_factor(x):
    i = 2
    while i * i < x:
        while x % i == 0:
            x /= i
        i += 1
    return x


print(largest_prime_factor(600851475143))

"""A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers 
is 9009 = 91 Ã— 99.
Find the largest palindrome made from the product of two 3-digit numbers."""


def largest_palindrome():
    largest = 0
    for i in range(100, 1000):
        for j in range(100, 1000):
            product = i * j
            if str(product) == str(product)[::-1] and product > largest:
                largest = product
    return largest


print(largest_palindrome())


"""
2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?"""

def smallest_multiple(n):
    i = 1
    while True:
        if all(i % j == 0 for j in range(1, n + 1)):
            return i
        i += 1


print(smallest_multiple(20))

""""
The sum of the squares of the first ten natural numbers is, 1^2 + 2^2 + ... + 10^2 = 385
The square of the sum of the first ten natural numbers is, (1 + 2 + ... + 10)^2 = 3025
Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is, 3025 
- 385 = 2640
Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
"""


def sum_square_difference(n):
    sum_of_squares = sum(i ** 2 for i in range(1, n + 1))
    square_of_sum = sum(i for i in range(1, n + 1)) ** 2
    return square_of_sum - sum_of_squares


print(sum_square_difference(100))


"""
By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
What is the 10001st prime number?
"""

def prime_number():
    i = 1
    while True:
        if all(i % j == 0 for j in range(1, i + 1)):
            return i
        i += 1


print(prime_number())

"""
A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
a^2 + b^2 = c^2
For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.
There exists exactly one Pythagorean triplet for which a + b + c = 1000.
Find the product abc.
"""

def pythagorean_triplet(n):
    for a in range(1, n):
        for b in range(a, n):
            c = n - a - b
            if a ** 2 + b ** 2 == c ** 2:
                return a * b * c

print(pythagorean_triplet(1000))


"""
The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
Find the sum of all the primes below two million.
"""

def sum_of_primes(n):
    sum = 0
    for i in range(n):
        if all(i % j == 0 for j in range(1, i + 1)):
            sum += i
    return sum


print(sum_of_primes(2000000))


"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 
1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:
"""


def triangle_number(n):
    return sum(i for i in range(1, n + 1))


def factors(n):
    return [i for i in range(1, n + 1) if n % i == 0]


def triangle_number_factors(n):
    for i in range(1, n + 1):
        print(triangle_number(i), factors(triangle_number(i)))


triangle_number_factors(7)
















